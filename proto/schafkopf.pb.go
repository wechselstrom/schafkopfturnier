// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schafkopf.proto

package schafkopf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Spieltyp int32

const (
	Spieltyp_Undefiniert Spieltyp = 0
	Spieltyp_Ramsch      Spieltyp = 1
	Spieltyp_Sauspiel    Spieltyp = 2
	Spieltyp_Wenz        Spieltyp = 3
	Spieltyp_Geier       Spieltyp = 4
	Spieltyp_Solo        Spieltyp = 5
)

var Spieltyp_name = map[int32]string{
	0: "Undefiniert",
	1: "Ramsch",
	2: "Sauspiel",
	3: "Wenz",
	4: "Geier",
	5: "Solo",
}

var Spieltyp_value = map[string]int32{
	"Undefiniert": 0,
	"Ramsch":      1,
	"Sauspiel":    2,
	"Wenz":        3,
	"Geier":       4,
	"Solo":        5,
}

func (x Spieltyp) String() string {
	return proto.EnumName(Spieltyp_name, int32(x))
}

func (Spieltyp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{0}
}

type Wert int32

const (
	Wert_Keiner Wert = 0
	Wert_Sieben Wert = 1
	Wert_Acht   Wert = 2
	Wert_Neun   Wert = 3
	Wert_Unter  Wert = 4
	Wert_Ober   Wert = 5
	Wert_Koenig Wert = 6
	Wert_Zehn   Wert = 7
	Wert_Sau    Wert = 8
)

var Wert_name = map[int32]string{
	0: "Keiner",
	1: "Sieben",
	2: "Acht",
	3: "Neun",
	4: "Unter",
	5: "Ober",
	6: "Koenig",
	7: "Zehn",
	8: "Sau",
}

var Wert_value = map[string]int32{
	"Keiner": 0,
	"Sieben": 1,
	"Acht":   2,
	"Neun":   3,
	"Unter":  4,
	"Ober":   5,
	"Koenig": 6,
	"Zehn":   7,
	"Sau":    8,
}

func (x Wert) String() string {
	return proto.EnumName(Wert_name, int32(x))
}

func (Wert) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{1}
}

type Farbe int32

const (
	Farbe_Natura   Farbe = 0
	Farbe_Eichel   Farbe = 1
	Farbe_Grass    Farbe = 2
	Farbe_Herz     Farbe = 3
	Farbe_Schellen Farbe = 4
)

var Farbe_name = map[int32]string{
	0: "Natura",
	1: "Eichel",
	2: "Grass",
	3: "Herz",
	4: "Schellen",
}

var Farbe_value = map[string]int32{
	"Natura":   0,
	"Eichel":   1,
	"Grass":    2,
	"Herz":     3,
	"Schellen": 4,
}

func (x Farbe) String() string {
	return proto.EnumName(Farbe_name, int32(x))
}

func (Farbe) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{2}
}

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type PlayerId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerId) Reset()         { *m = PlayerId{} }
func (m *PlayerId) String() string { return proto.CompactTextString(m) }
func (*PlayerId) ProtoMessage()    {}
func (*PlayerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{3}
}

func (m *PlayerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerId.Unmarshal(m, b)
}
func (m *PlayerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerId.Marshal(b, m, deterministic)
}
func (m *PlayerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerId.Merge(m, src)
}
func (m *PlayerId) XXX_Size() int {
	return xxx_messageInfo_PlayerId.Size(m)
}
func (m *PlayerId) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerId.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerId proto.InternalMessageInfo

func (m *PlayerId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DoppelRequest struct {
	Doppeln              bool     `protobuf:"varint,1,opt,name=doppeln,proto3" json:"doppeln,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoppelRequest) Reset()         { *m = DoppelRequest{} }
func (m *DoppelRequest) String() string { return proto.CompactTextString(m) }
func (*DoppelRequest) ProtoMessage()    {}
func (*DoppelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{4}
}

func (m *DoppelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoppelRequest.Unmarshal(m, b)
}
func (m *DoppelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoppelRequest.Marshal(b, m, deterministic)
}
func (m *DoppelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoppelRequest.Merge(m, src)
}
func (m *DoppelRequest) XXX_Size() int {
	return xxx_messageInfo_DoppelRequest.Size(m)
}
func (m *DoppelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DoppelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DoppelRequest proto.InternalMessageInfo

func (m *DoppelRequest) GetDoppeln() bool {
	if m != nil {
		return m.Doppeln
	}
	return false
}

type SpielKarteRequest struct {
	Karte                *Karte   `protobuf:"bytes,1,opt,name=karte,proto3" json:"karte,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpielKarteRequest) Reset()         { *m = SpielKarteRequest{} }
func (m *SpielKarteRequest) String() string { return proto.CompactTextString(m) }
func (*SpielKarteRequest) ProtoMessage()    {}
func (*SpielKarteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{5}
}

func (m *SpielKarteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpielKarteRequest.Unmarshal(m, b)
}
func (m *SpielKarteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpielKarteRequest.Marshal(b, m, deterministic)
}
func (m *SpielKarteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpielKarteRequest.Merge(m, src)
}
func (m *SpielKarteRequest) XXX_Size() int {
	return xxx_messageInfo_SpielKarteRequest.Size(m)
}
func (m *SpielKarteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpielKarteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpielKarteRequest proto.InternalMessageInfo

func (m *SpielKarteRequest) GetKarte() *Karte {
	if m != nil {
		return m.Karte
	}
	return nil
}

type GameEvent struct {
	// Types that are valid to be assigned to Eventtype:
	//	*GameEvent_Start
	//	*GameEvent_ErsteHand
	//	*GameEvent_ZweiteHand
	//	*GameEvent_Spiel
	//	*GameEvent_Doppler
	//	*GameEvent_Gespielt
	//	*GameEvent_Ende
	Eventtype            isGameEvent_Eventtype `protobuf_oneof:"eventtype"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GameEvent) Reset()         { *m = GameEvent{} }
func (m *GameEvent) String() string { return proto.CompactTextString(m) }
func (*GameEvent) ProtoMessage()    {}
func (*GameEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{6}
}

func (m *GameEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent.Unmarshal(m, b)
}
func (m *GameEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent.Marshal(b, m, deterministic)
}
func (m *GameEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent.Merge(m, src)
}
func (m *GameEvent) XXX_Size() int {
	return xxx_messageInfo_GameEvent.Size(m)
}
func (m *GameEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent proto.InternalMessageInfo

type isGameEvent_Eventtype interface {
	isGameEvent_Eventtype()
}

type GameEvent_Start struct {
	Start *Spielstart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type GameEvent_ErsteHand struct {
	ErsteHand *Hand `protobuf:"bytes,2,opt,name=erste_hand,json=ersteHand,proto3,oneof"`
}

type GameEvent_ZweiteHand struct {
	ZweiteHand *Hand `protobuf:"bytes,3,opt,name=zweite_hand,json=zweiteHand,proto3,oneof"`
}

type GameEvent_Spiel struct {
	Spiel *Spieldeklaration `protobuf:"bytes,5,opt,name=spiel,proto3,oneof"`
}

type GameEvent_Doppler struct {
	Doppler *Doppler `protobuf:"bytes,6,opt,name=doppler,proto3,oneof"`
}

type GameEvent_Gespielt struct {
	Gespielt *Karte `protobuf:"bytes,7,opt,name=gespielt,proto3,oneof"`
}

type GameEvent_Ende struct {
	Ende *Spielende `protobuf:"bytes,8,opt,name=ende,proto3,oneof"`
}

func (*GameEvent_Start) isGameEvent_Eventtype() {}

func (*GameEvent_ErsteHand) isGameEvent_Eventtype() {}

func (*GameEvent_ZweiteHand) isGameEvent_Eventtype() {}

func (*GameEvent_Spiel) isGameEvent_Eventtype() {}

func (*GameEvent_Doppler) isGameEvent_Eventtype() {}

func (*GameEvent_Gespielt) isGameEvent_Eventtype() {}

func (*GameEvent_Ende) isGameEvent_Eventtype() {}

func (m *GameEvent) GetEventtype() isGameEvent_Eventtype {
	if m != nil {
		return m.Eventtype
	}
	return nil
}

func (m *GameEvent) GetStart() *Spielstart {
	if x, ok := m.GetEventtype().(*GameEvent_Start); ok {
		return x.Start
	}
	return nil
}

func (m *GameEvent) GetErsteHand() *Hand {
	if x, ok := m.GetEventtype().(*GameEvent_ErsteHand); ok {
		return x.ErsteHand
	}
	return nil
}

func (m *GameEvent) GetZweiteHand() *Hand {
	if x, ok := m.GetEventtype().(*GameEvent_ZweiteHand); ok {
		return x.ZweiteHand
	}
	return nil
}

func (m *GameEvent) GetSpiel() *Spieldeklaration {
	if x, ok := m.GetEventtype().(*GameEvent_Spiel); ok {
		return x.Spiel
	}
	return nil
}

func (m *GameEvent) GetDoppler() *Doppler {
	if x, ok := m.GetEventtype().(*GameEvent_Doppler); ok {
		return x.Doppler
	}
	return nil
}

func (m *GameEvent) GetGespielt() *Karte {
	if x, ok := m.GetEventtype().(*GameEvent_Gespielt); ok {
		return x.Gespielt
	}
	return nil
}

func (m *GameEvent) GetEnde() *Spielende {
	if x, ok := m.GetEventtype().(*GameEvent_Ende); ok {
		return x.Ende
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GameEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GameEvent_Start)(nil),
		(*GameEvent_ErsteHand)(nil),
		(*GameEvent_ZweiteHand)(nil),
		(*GameEvent_Spiel)(nil),
		(*GameEvent_Doppler)(nil),
		(*GameEvent_Gespielt)(nil),
		(*GameEvent_Ende)(nil),
	}
}

// The request message containing the user's name.
type Spielstart struct {
	Players              []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	FirstPlayer          uint32   `protobuf:"varint,3,opt,name=first_player,json=firstPlayer,proto3" json:"first_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spielstart) Reset()         { *m = Spielstart{} }
func (m *Spielstart) String() string { return proto.CompactTextString(m) }
func (*Spielstart) ProtoMessage()    {}
func (*Spielstart) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{7}
}

func (m *Spielstart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spielstart.Unmarshal(m, b)
}
func (m *Spielstart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spielstart.Marshal(b, m, deterministic)
}
func (m *Spielstart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spielstart.Merge(m, src)
}
func (m *Spielstart) XXX_Size() int {
	return xxx_messageInfo_Spielstart.Size(m)
}
func (m *Spielstart) XXX_DiscardUnknown() {
	xxx_messageInfo_Spielstart.DiscardUnknown(m)
}

var xxx_messageInfo_Spielstart proto.InternalMessageInfo

func (m *Spielstart) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Spielstart) GetFirstPlayer() uint32 {
	if m != nil {
		return m.FirstPlayer
	}
	return 0
}

type Spielende struct {
	Sieger               []string `protobuf:"bytes,1,rep,name=sieger,proto3" json:"sieger,omitempty"`
	Verlierer            []string `protobuf:"bytes,2,rep,name=verlierer,proto3" json:"verlierer,omitempty"`
	Betrag               float32  `protobuf:"fixed32,3,opt,name=betrag,proto3" json:"betrag,omitempty"`
	Kommentar            string   `protobuf:"bytes,4,opt,name=kommentar,proto3" json:"kommentar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spielende) Reset()         { *m = Spielende{} }
func (m *Spielende) String() string { return proto.CompactTextString(m) }
func (*Spielende) ProtoMessage()    {}
func (*Spielende) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{8}
}

func (m *Spielende) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spielende.Unmarshal(m, b)
}
func (m *Spielende) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spielende.Marshal(b, m, deterministic)
}
func (m *Spielende) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spielende.Merge(m, src)
}
func (m *Spielende) XXX_Size() int {
	return xxx_messageInfo_Spielende.Size(m)
}
func (m *Spielende) XXX_DiscardUnknown() {
	xxx_messageInfo_Spielende.DiscardUnknown(m)
}

var xxx_messageInfo_Spielende proto.InternalMessageInfo

func (m *Spielende) GetSieger() []string {
	if m != nil {
		return m.Sieger
	}
	return nil
}

func (m *Spielende) GetVerlierer() []string {
	if m != nil {
		return m.Verlierer
	}
	return nil
}

func (m *Spielende) GetBetrag() float32 {
	if m != nil {
		return m.Betrag
	}
	return 0
}

func (m *Spielende) GetKommentar() string {
	if m != nil {
		return m.Kommentar
	}
	return ""
}

type Doppler struct {
	Spieler              string   `protobuf:"bytes,1,opt,name=Spieler,proto3" json:"Spieler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Doppler) Reset()         { *m = Doppler{} }
func (m *Doppler) String() string { return proto.CompactTextString(m) }
func (*Doppler) ProtoMessage()    {}
func (*Doppler) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{9}
}

func (m *Doppler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Doppler.Unmarshal(m, b)
}
func (m *Doppler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Doppler.Marshal(b, m, deterministic)
}
func (m *Doppler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doppler.Merge(m, src)
}
func (m *Doppler) XXX_Size() int {
	return xxx_messageInfo_Doppler.Size(m)
}
func (m *Doppler) XXX_DiscardUnknown() {
	xxx_messageInfo_Doppler.DiscardUnknown(m)
}

var xxx_messageInfo_Doppler proto.InternalMessageInfo

func (m *Doppler) GetSpieler() string {
	if m != nil {
		return m.Spieler
	}
	return ""
}

type Hand struct {
	Received             []*Karte `protobuf:"bytes,1,rep,name=received,proto3" json:"received,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hand) Reset()         { *m = Hand{} }
func (m *Hand) String() string { return proto.CompactTextString(m) }
func (*Hand) ProtoMessage()    {}
func (*Hand) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{10}
}

func (m *Hand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hand.Unmarshal(m, b)
}
func (m *Hand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hand.Marshal(b, m, deterministic)
}
func (m *Hand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hand.Merge(m, src)
}
func (m *Hand) XXX_Size() int {
	return xxx_messageInfo_Hand.Size(m)
}
func (m *Hand) XXX_DiscardUnknown() {
	xxx_messageInfo_Hand.DiscardUnknown(m)
}

var xxx_messageInfo_Hand proto.InternalMessageInfo

func (m *Hand) GetReceived() []*Karte {
	if m != nil {
		return m.Received
	}
	return nil
}

type Spieldeklaration struct {
	HatSpiel             bool     `protobuf:"varint,1,opt,name=hat_spiel,json=hatSpiel,proto3" json:"hat_spiel,omitempty"`
	Spieler              string   `protobuf:"bytes,2,opt,name=spieler,proto3" json:"spieler,omitempty"`
	Spieltyp             Spieltyp `protobuf:"varint,3,opt,name=spieltyp,proto3,enum=schafkopf.Spieltyp" json:"spieltyp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spieldeklaration) Reset()         { *m = Spieldeklaration{} }
func (m *Spieldeklaration) String() string { return proto.CompactTextString(m) }
func (*Spieldeklaration) ProtoMessage()    {}
func (*Spieldeklaration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{11}
}

func (m *Spieldeklaration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spieldeklaration.Unmarshal(m, b)
}
func (m *Spieldeklaration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spieldeklaration.Marshal(b, m, deterministic)
}
func (m *Spieldeklaration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spieldeklaration.Merge(m, src)
}
func (m *Spieldeklaration) XXX_Size() int {
	return xxx_messageInfo_Spieldeklaration.Size(m)
}
func (m *Spieldeklaration) XXX_DiscardUnknown() {
	xxx_messageInfo_Spieldeklaration.DiscardUnknown(m)
}

var xxx_messageInfo_Spieldeklaration proto.InternalMessageInfo

func (m *Spieldeklaration) GetHatSpiel() bool {
	if m != nil {
		return m.HatSpiel
	}
	return false
}

func (m *Spieldeklaration) GetSpieler() string {
	if m != nil {
		return m.Spieler
	}
	return ""
}

func (m *Spieldeklaration) GetSpieltyp() Spieltyp {
	if m != nil {
		return m.Spieltyp
	}
	return Spieltyp_Undefiniert
}

type Spiel struct {
	Spieltyp             Spieltyp `protobuf:"varint,1,opt,name=spieltyp,proto3,enum=schafkopf.Spieltyp" json:"spieltyp,omitempty"`
	Farbe                Farbe    `protobuf:"varint,2,opt,name=farbe,proto3,enum=schafkopf.Farbe" json:"farbe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spiel) Reset()         { *m = Spiel{} }
func (m *Spiel) String() string { return proto.CompactTextString(m) }
func (*Spiel) ProtoMessage()    {}
func (*Spiel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{12}
}

func (m *Spiel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spiel.Unmarshal(m, b)
}
func (m *Spiel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spiel.Marshal(b, m, deterministic)
}
func (m *Spiel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spiel.Merge(m, src)
}
func (m *Spiel) XXX_Size() int {
	return xxx_messageInfo_Spiel.Size(m)
}
func (m *Spiel) XXX_DiscardUnknown() {
	xxx_messageInfo_Spiel.DiscardUnknown(m)
}

var xxx_messageInfo_Spiel proto.InternalMessageInfo

func (m *Spiel) GetSpieltyp() Spieltyp {
	if m != nil {
		return m.Spieltyp
	}
	return Spieltyp_Undefiniert
}

func (m *Spiel) GetFarbe() Farbe {
	if m != nil {
		return m.Farbe
	}
	return Farbe_Natura
}

type Karte struct {
	Wert                 Wert     `protobuf:"varint,1,opt,name=wert,proto3,enum=schafkopf.Wert" json:"wert,omitempty"`
	Farbe                Farbe    `protobuf:"varint,2,opt,name=farbe,proto3,enum=schafkopf.Farbe" json:"farbe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Karte) Reset()         { *m = Karte{} }
func (m *Karte) String() string { return proto.CompactTextString(m) }
func (*Karte) ProtoMessage()    {}
func (*Karte) Descriptor() ([]byte, []int) {
	return fileDescriptor_7593a9a9fb0342c6, []int{13}
}

func (m *Karte) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Karte.Unmarshal(m, b)
}
func (m *Karte) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Karte.Marshal(b, m, deterministic)
}
func (m *Karte) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Karte.Merge(m, src)
}
func (m *Karte) XXX_Size() int {
	return xxx_messageInfo_Karte.Size(m)
}
func (m *Karte) XXX_DiscardUnknown() {
	xxx_messageInfo_Karte.DiscardUnknown(m)
}

var xxx_messageInfo_Karte proto.InternalMessageInfo

func (m *Karte) GetWert() Wert {
	if m != nil {
		return m.Wert
	}
	return Wert_Keiner
}

func (m *Karte) GetFarbe() Farbe {
	if m != nil {
		return m.Farbe
	}
	return Farbe_Natura
}

func init() {
	proto.RegisterEnum("schafkopf.Spieltyp", Spieltyp_name, Spieltyp_value)
	proto.RegisterEnum("schafkopf.Wert", Wert_name, Wert_value)
	proto.RegisterEnum("schafkopf.Farbe", Farbe_name, Farbe_value)
	proto.RegisterType((*Message)(nil), "schafkopf.Message")
	proto.RegisterType((*Empty)(nil), "schafkopf.Empty")
	proto.RegisterType((*Response)(nil), "schafkopf.Response")
	proto.RegisterType((*PlayerId)(nil), "schafkopf.PlayerId")
	proto.RegisterType((*DoppelRequest)(nil), "schafkopf.DoppelRequest")
	proto.RegisterType((*SpielKarteRequest)(nil), "schafkopf.SpielKarteRequest")
	proto.RegisterType((*GameEvent)(nil), "schafkopf.GameEvent")
	proto.RegisterType((*Spielstart)(nil), "schafkopf.Spielstart")
	proto.RegisterType((*Spielende)(nil), "schafkopf.Spielende")
	proto.RegisterType((*Doppler)(nil), "schafkopf.Doppler")
	proto.RegisterType((*Hand)(nil), "schafkopf.Hand")
	proto.RegisterType((*Spieldeklaration)(nil), "schafkopf.Spieldeklaration")
	proto.RegisterType((*Spiel)(nil), "schafkopf.Spiel")
	proto.RegisterType((*Karte)(nil), "schafkopf.Karte")
}

func init() {
	proto.RegisterFile("schafkopf.proto", fileDescriptor_7593a9a9fb0342c6)
}

var fileDescriptor_7593a9a9fb0342c6 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x8f, 0xdb, 0x44,
	0x10, 0x4e, 0x72, 0x71, 0x62, 0x4f, 0xd2, 0x3b, 0xb3, 0xbc, 0xc8, 0xba, 0x16, 0x09, 0x5c, 0x09,
	0x95, 0x13, 0x1c, 0x25, 0x45, 0x02, 0xc1, 0x07, 0x68, 0xd5, 0xa3, 0xa9, 0xaa, 0x16, 0xe4, 0xb4,
	0xaa, 0xc4, 0x97, 0x63, 0x13, 0x4f, 0x92, 0x55, 0x9c, 0xb5, 0xd9, 0xdd, 0xdc, 0x91, 0xfb, 0x61,
	0xfc, 0x2c, 0x7e, 0x03, 0xda, 0x59, 0xdb, 0x71, 0x43, 0x40, 0xf7, 0xcd, 0x33, 0xf3, 0x3c, 0xcf,
	0xce, 0xec, 0xce, 0x8c, 0xe1, 0x44, 0xcf, 0x96, 0x7c, 0xbe, 0xca, 0x8b, 0xf9, 0x79, 0xa1, 0x72,
	0x93, 0xb3, 0xa0, 0x76, 0xc4, 0x1f, 0x43, 0xff, 0x25, 0x6a, 0xcd, 0x17, 0xc8, 0x18, 0x74, 0x0d,
	0xfe, 0x69, 0xa2, 0xf6, 0x27, 0xed, 0x07, 0x41, 0x42, 0xdf, 0x71, 0x1f, 0xbc, 0x8b, 0x75, 0x61,
	0xb6, 0xf1, 0x77, 0xe0, 0x27, 0xa8, 0x8b, 0x5c, 0x6a, 0x64, 0x11, 0xf4, 0xf5, 0x66, 0x36, 0x43,
	0xad, 0x09, 0xeb, 0x27, 0x95, 0x59, 0x4b, 0x74, 0x1a, 0x12, 0xa7, 0xe0, 0xff, 0x9a, 0xf1, 0x2d,
	0xaa, 0xe7, 0x29, 0x3b, 0x86, 0x8e, 0x48, 0xcb, 0x03, 0x3a, 0x22, 0x8d, 0x3f, 0x87, 0x3b, 0x4f,
	0xf3, 0xa2, 0xc0, 0x2c, 0xc1, 0x3f, 0x36, 0xa8, 0x8d, 0x95, 0x4e, 0xc9, 0x21, 0x2b, 0xe9, 0xd2,
	0x8c, 0x7f, 0x80, 0xf7, 0x26, 0x85, 0xc0, 0xec, 0x05, 0x57, 0x06, 0x2b, 0xf8, 0x67, 0xe0, 0xad,
	0xac, 0x4d, 0xe0, 0xc1, 0x28, 0x3c, 0xdf, 0x55, 0xea, 0x70, 0x2e, 0x1c, 0xff, 0xdd, 0x81, 0xe0,
	0x19, 0x5f, 0xe3, 0xc5, 0x15, 0x4a, 0xc3, 0xbe, 0x04, 0x4f, 0x1b, 0xae, 0x4c, 0xc9, 0xfa, 0xb0,
	0xc1, 0xa2, 0x23, 0x28, 0x38, 0x6e, 0x25, 0x0e, 0xc5, 0x1e, 0x02, 0xa0, 0xd2, 0x06, 0x2f, 0x97,
	0x5c, 0xa6, 0x54, 0xda, 0x60, 0x74, 0xd2, 0xe0, 0x8c, 0xb9, 0x4c, 0xc7, 0xad, 0x24, 0x20, 0x90,
	0x35, 0xd8, 0x08, 0x06, 0x37, 0xd7, 0x28, 0x2a, 0xca, 0xd1, 0x7f, 0x51, 0xc0, 0xa1, 0x88, 0xf3,
	0x08, 0x3c, 0x6d, 0x0f, 0x8f, 0x3c, 0x42, 0xdf, 0xdd, 0x4f, 0x2a, 0xc5, 0x55, 0xc6, 0x15, 0x37,
	0x22, 0x97, 0x94, 0x9a, 0xf5, 0xb1, 0x73, 0x77, 0x5d, 0x19, 0xaa, 0xa8, 0x47, 0x34, 0xd6, 0xa0,
	0x3d, 0x75, 0x91, 0x71, 0x2b, 0xa9, 0x40, 0xec, 0x1c, 0xfc, 0x05, 0x12, 0xd5, 0x44, 0xfd, 0xc3,
	0x57, 0x36, 0x6e, 0x25, 0x35, 0x86, 0x9d, 0x41, 0x17, 0x65, 0x8a, 0x91, 0x4f, 0xd8, 0x0f, 0xf6,
	0x73, 0xb2, 0xb1, 0x71, 0x2b, 0x21, 0xcc, 0x93, 0x01, 0x04, 0x68, 0xaf, 0xd7, 0x6c, 0x0b, 0x8c,
	0x9f, 0x03, 0xec, 0xae, 0xd2, 0xbe, 0x6a, 0x41, 0x2d, 0x60, 0x1b, 0xe6, 0xe8, 0x41, 0x90, 0x54,
	0x26, 0xfb, 0x14, 0x86, 0x73, 0xa1, 0xb4, 0xb9, 0x74, 0x0e, 0xba, 0xaa, 0x3b, 0xc9, 0x80, 0x7c,
	0xae, 0x6b, 0xe2, 0x6b, 0x08, 0xea, 0xc3, 0xd8, 0x47, 0xd0, 0xd3, 0x02, 0x17, 0xa8, 0x4a, 0xa1,
	0xd2, 0x62, 0xf7, 0x20, 0xb8, 0x42, 0x95, 0x09, 0x54, 0xa8, 0xa2, 0x0e, 0x85, 0x76, 0x0e, 0xcb,
	0x9a, 0xa2, 0x51, 0x7c, 0x41, 0xfa, 0x9d, 0xa4, 0xb4, 0x2c, 0x6b, 0x95, 0xaf, 0xd7, 0x28, 0x0d,
	0x57, 0x51, 0x97, 0xba, 0x72, 0xe7, 0x88, 0xef, 0x43, 0xbf, 0xbc, 0x42, 0x5b, 0x80, 0xcb, 0x41,
	0x95, 0xcd, 0x5b, 0x99, 0xf1, 0x37, 0xd0, 0xa5, 0xe7, 0xfb, 0x02, 0x7c, 0x85, 0x33, 0x14, 0x57,
	0x98, 0x52, 0x6a, 0x87, 0x9a, 0xb1, 0x46, 0xc4, 0x37, 0x10, 0xee, 0x3f, 0x2a, 0xbb, 0x0b, 0xc1,
	0x92, 0x9b, 0x4b, 0xd7, 0x04, 0xae, 0xf9, 0xfd, 0x25, 0x37, 0x84, 0xa3, 0x91, 0x2b, 0x13, 0x70,
	0xb3, 0x55, 0x99, 0xec, 0x2b, 0xf0, 0xdd, 0x63, 0x6d, 0x0b, 0xaa, 0xee, 0x78, 0xf4, 0xfe, 0xfe,
	0x33, 0x99, 0x6d, 0x91, 0xd4, 0xa0, 0xf8, 0x77, 0xf0, 0x9c, 0x66, 0x93, 0xd9, 0xbe, 0x05, 0xd3,
	0x4e, 0xdb, 0x9c, 0xab, 0x29, 0x52, 0x0a, 0xc7, 0xef, 0x14, 0xf8, 0xb3, 0xf5, 0x27, 0x2e, 0x1c,
	0xbf, 0x06, 0x8f, 0x0a, 0x66, 0xf7, 0xa1, 0x7b, 0x8d, 0xe5, 0x9c, 0x1d, 0xbf, 0x33, 0x00, 0x6f,
	0x51, 0x99, 0x84, 0x82, 0xb7, 0x55, 0x3d, 0x7b, 0x0d, 0x7e, 0x95, 0x13, 0x3b, 0x81, 0xc1, 0x1b,
	0x99, 0xe2, 0x5c, 0x48, 0x81, 0xca, 0x84, 0x2d, 0x06, 0xd0, 0x4b, 0xf8, 0x5a, 0xcf, 0x96, 0x61,
	0x9b, 0x0d, 0xc1, 0x9f, 0xf0, 0x0d, 0x65, 0x1d, 0x76, 0x98, 0x0f, 0xdd, 0xb7, 0x28, 0x6f, 0xc2,
	0x23, 0x16, 0x80, 0xf7, 0x0c, 0x05, 0xaa, 0xb0, 0x6b, 0x9d, 0x93, 0x3c, 0xcb, 0x43, 0xef, 0x6c,
	0x6e, 0xc3, 0xca, 0x58, 0x81, 0x17, 0x28, 0x24, 0x2a, 0x27, 0x36, 0x11, 0x38, 0x45, 0x19, 0xb6,
	0x2d, 0xf2, 0xf1, 0x6c, 0x69, 0x9c, 0xd0, 0x2b, 0xdc, 0x48, 0x27, 0xf4, 0x46, 0x9a, 0x4a, 0xe8,
	0x97, 0x29, 0xaa, 0xd0, 0x23, 0x81, 0x1c, 0xa5, 0x58, 0x84, 0x3d, 0xeb, 0xfd, 0x0d, 0x97, 0x32,
	0xec, 0xb3, 0x3e, 0x1c, 0x4d, 0xf8, 0x26, 0xf4, 0xcf, 0x9e, 0x80, 0x47, 0xd5, 0x58, 0xdc, 0x2b,
	0x6e, 0x36, 0x8a, 0xbb, 0x83, 0x2e, 0xc4, 0x6c, 0x89, 0x59, 0xd8, 0xa6, 0xec, 0x14, 0xd7, 0xda,
	0x9d, 0x34, 0x46, 0x65, 0x53, 0xb6, 0xa5, 0xd8, 0x78, 0x86, 0x32, 0xec, 0x8e, 0xfe, 0xea, 0xc0,
	0x6e, 0x73, 0xb3, 0xef, 0x61, 0x38, 0xb1, 0xd3, 0x65, 0xc7, 0x44, 0xc8, 0x05, 0x6b, 0x5e, 0x1c,
	0xed, 0xec, 0xd3, 0xe6, 0xbc, 0xd6, 0xdb, 0x2f, 0x6e, 0x3d, 0x6c, 0xb3, 0x6f, 0x5d, 0x6b, 0x63,
	0x26, 0x59, 0xb4, 0xb7, 0x31, 0xea, 0x5d, 0x7c, 0xfa, 0x2f, 0xc1, 0xb8, 0xc5, 0x7e, 0x84, 0x21,
	0x3d, 0xc2, 0x63, 0x69, 0x7f, 0x19, 0x92, 0xfd, 0xdf, 0x9a, 0x3a, 0x28, 0xf0, 0x13, 0x0c, 0xa9,
	0x37, 0xca, 0x91, 0x66, 0xf7, 0xf6, 0x05, 0x9a, 0xfb, 0xfd, 0xa0, 0xc2, 0xd7, 0xd0, 0x9f, 0xa0,
	0x4c, 0x5f, 0xea, 0x05, 0x6b, 0x6e, 0xbb, 0xf2, 0x2f, 0x76, 0x88, 0x32, 0xed, 0xd1, 0x6f, 0xef,
	0xd1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x80, 0xca, 0xe4, 0x09, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchafkopfClient is the client API for Schafkopf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchafkopfClient interface {
	StartPlaying(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Schafkopf_StartPlayingClient, error)
	Doppeln(ctx context.Context, in *DoppelRequest, opts ...grpc.CallOption) (*Empty, error)
	SpielAnsagen(ctx context.Context, in *Spieldeklaration, opts ...grpc.CallOption) (*Empty, error)
	KarteSpielen(ctx context.Context, in *SpielKarteRequest, opts ...grpc.CallOption) (*Empty, error)
	SendMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
}

type schafkopfClient struct {
	cc grpc.ClientConnInterface
}

func NewSchafkopfClient(cc grpc.ClientConnInterface) SchafkopfClient {
	return &schafkopfClient{cc}
}

func (c *schafkopfClient) StartPlaying(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Schafkopf_StartPlayingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Schafkopf_serviceDesc.Streams[0], "/schafkopf.schafkopf/StartPlaying", opts...)
	if err != nil {
		return nil, err
	}
	x := &schafkopfStartPlayingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Schafkopf_StartPlayingClient interface {
	Recv() (*GameEvent, error)
	grpc.ClientStream
}

type schafkopfStartPlayingClient struct {
	grpc.ClientStream
}

func (x *schafkopfStartPlayingClient) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schafkopfClient) Doppeln(ctx context.Context, in *DoppelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/schafkopf.schafkopf/Doppeln", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schafkopfClient) SpielAnsagen(ctx context.Context, in *Spieldeklaration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/schafkopf.schafkopf/SpielAnsagen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schafkopfClient) KarteSpielen(ctx context.Context, in *SpielKarteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/schafkopf.schafkopf/KarteSpielen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schafkopfClient) SendMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/schafkopf.schafkopf/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchafkopfServer is the server API for Schafkopf service.
type SchafkopfServer interface {
	StartPlaying(*Empty, Schafkopf_StartPlayingServer) error
	Doppeln(context.Context, *DoppelRequest) (*Empty, error)
	SpielAnsagen(context.Context, *Spieldeklaration) (*Empty, error)
	KarteSpielen(context.Context, *SpielKarteRequest) (*Empty, error)
	SendMsg(context.Context, *Message) (*Empty, error)
}

// UnimplementedSchafkopfServer can be embedded to have forward compatible implementations.
type UnimplementedSchafkopfServer struct {
}

func (*UnimplementedSchafkopfServer) StartPlaying(req *Empty, srv Schafkopf_StartPlayingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPlaying not implemented")
}
func (*UnimplementedSchafkopfServer) Doppeln(ctx context.Context, req *DoppelRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Doppeln not implemented")
}
func (*UnimplementedSchafkopfServer) SpielAnsagen(ctx context.Context, req *Spieldeklaration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpielAnsagen not implemented")
}
func (*UnimplementedSchafkopfServer) KarteSpielen(ctx context.Context, req *SpielKarteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KarteSpielen not implemented")
}
func (*UnimplementedSchafkopfServer) SendMsg(ctx context.Context, req *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}

func RegisterSchafkopfServer(s *grpc.Server, srv SchafkopfServer) {
	s.RegisterService(&_Schafkopf_serviceDesc, srv)
}

func _Schafkopf_StartPlaying_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchafkopfServer).StartPlaying(m, &schafkopfStartPlayingServer{stream})
}

type Schafkopf_StartPlayingServer interface {
	Send(*GameEvent) error
	grpc.ServerStream
}

type schafkopfStartPlayingServer struct {
	grpc.ServerStream
}

func (x *schafkopfStartPlayingServer) Send(m *GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Schafkopf_Doppeln_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoppelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchafkopfServer).Doppeln(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schafkopf.schafkopf/Doppeln",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchafkopfServer).Doppeln(ctx, req.(*DoppelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schafkopf_SpielAnsagen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spieldeklaration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchafkopfServer).SpielAnsagen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schafkopf.schafkopf/SpielAnsagen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchafkopfServer).SpielAnsagen(ctx, req.(*Spieldeklaration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schafkopf_KarteSpielen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpielKarteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchafkopfServer).KarteSpielen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schafkopf.schafkopf/KarteSpielen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchafkopfServer).KarteSpielen(ctx, req.(*SpielKarteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schafkopf_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchafkopfServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schafkopf.schafkopf/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchafkopfServer).SendMsg(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schafkopf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schafkopf.schafkopf",
	HandlerType: (*SchafkopfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Doppeln",
			Handler:    _Schafkopf_Doppeln_Handler,
		},
		{
			MethodName: "SpielAnsagen",
			Handler:    _Schafkopf_SpielAnsagen_Handler,
		},
		{
			MethodName: "KarteSpielen",
			Handler:    _Schafkopf_KarteSpielen_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Schafkopf_SendMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartPlaying",
			Handler:       _Schafkopf_StartPlaying_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schafkopf.proto",
}
